#!/usr/bin/env node
process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0;

const program = require('commander');
const pkg = require('../package.json');

const { manageConfig } = require('./cmds/config');
const ping = require('./cmds/ping');
const update = require('./cmds/update');
const enrich = require('./cmds/enrich');

program.on('command:*', () => {
  console.error(`Invalid command: ${program.args.join(' ')}\nSee --help for a list of available commands.`);
  process.exit(1);
});

program.version(pkg.version);

program
  .command('config')
  .description('config management command to establish the connection between the command and ezunpaywall')
  .option('-g --get', 'display the configuration')
  .option('-s --set <key> [value]', 'update config')
  .option('-L --list', 'list of attributes required for configuration')
  .action((options) => manageConfig(options));

program
  .command('ping')
  .description('check if service is available')
  .option('-U --use <use>', 'use a custom config')
  .action((options) => ping(options));

program
  .command('update <command>')
  .description('start an unpaywall data update process')
  .option('--file <file>', 'snapshot\'s file installed on ezunpaywall')
  .option('--force', 'force update without check if is already installed')
  .option('--startDate <startDate>', 'start date to download and insert updates from unpaywall')
  .option('--endDate <endDate>', 'end date to download and insert updates from unpaywall')
  .option('--offset <offset>', 'line where processing will start')
  .option('--limit <limit>', 'line where processing will end')
  .option('--latest', 'latest report')
  .option('--date <date>', 'date of report')
  .option('--verbose', 'display loadbar and exit if process end')
  .option('-L --list', 'list of snapshot installed on ezunpaywall')
  .option('-I --index <index>', 'name of the index to which the data is inserted')
  .option('-U --use <use>', 'use a custom config')
  .action((
    command,
    options,
  ) => update(command, options).catch((err) => console.log(err)));

program
  .command('enrich <command>')
  .description('enrich file with unpaywall attributes')
  .option('--file <file>', 'sile which must be enriched')
  .option('--separator <separator>', 'separator of csv file')
  .option('--attributes <attributes>', 'attributes which must be enriched in graphql format. By default, all attributes are added')
  .option('--out <out>', 'name of enriched file. By default, the output file is named: out.jsonl')
  .option('--verbose', 'display loadbar and exit if process end')
  .option('-I --index <index>', 'name of the index from which the data will be retrieved')
  .option('-U --use <use>', 'use a custom config')
  .action((
    command,
    options,
  ) => enrich(command, options));

program.parse(process.argv);
