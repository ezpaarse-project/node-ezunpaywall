#!/usr/bin/env node

const program = require('commander');
const pkg = require('../package.json');

const { manageConfig } = require('./cmds/config');
const { ping } = require('./cmds/ping');
const { update } = require('./cmds/update');
const { report } = require('./cmds/reports');
const { getStatus } = require('./cmds/status');
const { enrichJSON, enrichCSV } = require('./cmds/enrich');

program.on('command:*', () => {
  console.error(`Invalid command: ${program.args.join(' ')}\nSee --help for a list of available commands.`);
  process.exit(1);
});

program.version(pkg.version);

program
  .command('config')
  .description('config management command to establish the connection between the command and ezunpaywall')
  .option('-g --get', 'display the configuration')
  .option('-s --set', 'initialize the configuration file in $HOME/.config')
  .option('--ezunpaywallProtocol <ezunpaywallProtocol>', 'ezunpaywall protocol')
  .option('--ezunpaywallHost <ezunpaywallHost>', 'ezunpaywall Host')
  .option('--ezunpaywallPort <ezunpaywallPort>', 'ezunpaywall port')
  .option('--ezmetaProtocol <ezmetaProtocol>', 'ezmeta protocol')
  .option('--ezmetaHost <ezmetaHost>', 'ezmeta Host')
  .option('--ezmetaPort <ezmetaPort>', 'ezmeta port')
  .option('--ezmetaUser <ezmetaUser>', 'ezmeta user')
  .option('--ezmetaPassword <ezmetaPassword>', 'ezmeta password')
  .option('-k -apikey <apikey>', 'admin apikey')
  .option('-L --list', 'list of attributes required for configuration')
  .action((args) => manageConfig(args));

program
  .command('ping')
  .description('Check if service is available')
  .option('-U --use <use>', 'use a custom config')
  .action((args) => ping(args));

program
  .command('update')
  .description('Starts an unpaywall data update process')
  .option('-f --file <file>', 'snapshot\'s file installed on ezunpaywall')
  .option('-s --startDate <starteDate>', 'start date to download and insert updates from unpaywall')
  .option('-e --endDate <endDate>', 'end date to download and insert updates from unpaywall')
  .option('-o --offset <offset>', 'line where processing will start')
  .option('-l --limit <limit>', 'line where processing will end')
  .option('-L --list', 'list of snapshot installed on ezunpaywall')
  .option('-I --index <index>', 'name of the index to which the data is inserted')
  .option('-U --use <use>', 'use a custom config')
  .action((args) => update(args));

program
  .command('status')
  .description('Indicates if an update process is running')
  .option('-U --use <use>', 'use a custom config')
  .action((args) => getStatus(args));

program
  .command('report')
  .description('get the content report')
  .option('-f --file <file>', 'report file installed on ezunpaywall')
  .option('-l --latest [latest]', 'boolean')
  .option('-s --status <status>', 'status of report, success and error only accepted')
  .option('-L --list', 'list of reports generated by ezunpaywall')
  .option('-U --use <use>', 'use a custom config')
  .action((args) => report(args));

program
  .command('enrichJSON')
  .description('enrich a json file with unpaywall attributes')
  .description('Example: ezu enrichJSON -f needToBeEnrich.jsonl -a is_oa,doi_url -o file-enriched.jsonl')
  .option('-f --file <file>', 'file which must be enriched')
  .option('-a --attributes <attributes>', 'attributes which must be enriched in graphql format. By default, all attributes are added')
  .option('-o --out <out>', 'name of enriched file. By default, the output file is named: out.jsonl')
  .option('-v --verbose', 'logs how much lines are enriched')
  .option('-I --index <index>', 'name of the index from which the data will be retrieved')
  .option('-U --use <use>', 'use a custom config')
  .action((args) => enrichJSON(args));

program
  .command('enrichCSV')
  .description('enrich a csv file with unpaywall attributes')
  .description('Example: ezu enrichCSV -f needToBeEnrich.csv -a is_oa,doi_url -o file-enriched.csv')
  .option('-f --file <file>', 'file which must be enriched')
  .option('-a --attributes <attributes>', 'attributes which must be enriched in graphql format By default, all attributes are added')
  .option('-s --separator <separator>', 'separator of csv out file')
  .option('-o --out <out>', 'name of enriched file')
  .option('-v --verbose', 'logs how much lines are enriched')
  .option('-I --index <index>', 'name of the index from which the data will be retrieved')
  .option('-U --use <use>', 'use a custom config')
  .action((args) => enrichCSV(args));

program.parse(process.argv);
