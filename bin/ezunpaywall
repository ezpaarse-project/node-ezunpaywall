#!/usr/bin/env node

const program = require('commander');
const pkg = require('../package.json');

const { config } = require('./cmds/config');
const { ping } = require('./cmds/ping');
const { startProcess } = require('./cmds/updates');
const { getReports } = require('./cmds/reports');
const { getTask } = require('./cmds/status');
const { enrichJSON, enrichCSV } = require('./cmds/enrich');

program.on('command:*', () => {
  console.error(`Invalid command: ${program.args.join(' ')}\nSee --help for a list of available commands.`);
  process.exit(1);
});

program.version(pkg.version);

program
  .command('config')
  .option('-g --get', 'display the configuration')
  .option('-s --set', 'initialize the configuration file in $HOME/.config')
  .option('--url <url>', 'ezunpaywall url')
  .option('--port <port>', 'ezunpaywall port')
  .option('-l --list', 'list of attributes required for configuration')
  .description('make the config to fetch ezunpaywall')
  .action((args) => config(args));

program
  .command('ping')
  .description('Check if service is available')
  .option('-u --use <use>', 'use a custom config')
  .action((args) => ping(args));

program
  .command('update')
  .option('-f --file <file>', 'snapshot\'s file installed on ezunpaywall')
  .option('-l --list', 'list of snapshot installed on ezunpaywall')
  .option('-sd --startDate <starteDate>', 'start date to download and insert updates from unpaywall')
  .option('-ed --endDate <endDate>', 'end date to download and insert updates from unpaywall')
  .option('-of --offset <offset>', 'line where processing will start')
  .option('-li --limit <limit>', 'line where processing will end')
  .option('-u --use <use>', 'use a custom config')
  .description('Starts an unpaywall data update process')
  .action((args) => startProcess(args));

program
  .command('task')
  .description('get status of processus in courses')
  .option('-u --use <use>', 'use a custom config')
  .action((args) => getTask(args));

program
  .command('reports')
  .option('-f --file <file>', 'report file installed on ezunpaywall')
  .option('-l --list', 'list of reports generated by ezunpaywall')
  .option('-la --latest [latest]', 'boolean')
  .option('-s --status <status>', 'status of report, success and error only accepted')
  .option('-u --use <use>', 'use a custom config')
  .description('get report')
  .action((args) => getReports(args));

program
  .command('enrichJSON')
  .option('-f --file <file>', 'file which must be enriched')
  .option('-a --attributes <attributes>', 'attributes which must be enriched (separeted by comma). By default, all attributes are added')
  .option('-o --out <out>', 'name of enriched file. By default, the output file is named: out.jsonl')
  .option('-v --verbose', 'logs how much lines are enriched')
  .option('-u --use <use>', 'use a custom config')
  .description('enrich a json file with unpaywall attributes')
  .description('Example: ezu enrichJSON -f needToBeEnrich.jsonl -a is_oa,doi_url -o file-enriched.jsonl')
  .action((args) => enrichJSON(args));

program
  .command('enrichCSV')
  .option('-f --file <file>', 'file which must be enriched')
  .option('-a --attributes <attributes>', 'attributes which must be enriched (separeted by comma) By default, all attributes are added')
  .option('-s --separator <separator>', 'separator of csv out file')
  .option('-o --out <out>', 'name of enriched file')
  .option('-v --verbose', 'logs how much lines are enriched')
  .option('-u --use <use>', 'use a custom config')
  .description('enrich a csv file with unpaywall attributes')
  .description('Example: ezu enrichCSV -f needToBeEnrich.csv -a is_oa,doi_url -o file-enriched.csv')
  .action((args) => enrichCSV(args));

program.parse(process.argv);
