const inquirer = require('inquirer');

const { connection } = require('../../lib/axios');
const { getConfig } = require('../../lib/config');

/**
 * get list of report in ezunpaywall
 * @param {object} axios - axios
 * @param {object} config - config
 * @returns {array<string>} array of name of report
 */
const getReports = async (axios, config) => {
  let res;
  try {
    res = await axios({
      method: 'GET',
      url: '/update/snapshot',
    });
  } catch (err) {
    console.error(`service unavailable ${config.url}:${config.port}`);
    process.exit(1);
  }
  return res?.data;
};

/**
 * get the content of report
 * @param {*} args commander arguments
 * @param -f --file <file> - report file installed on ezunpaywall
 * @param -l --list - list of reports generated by ezunpaywall
 * @param -la --latest [latest] - boolean
 * @param -s --status <status> - status of report, success and error only accepted
 * @param -u --use <use> - use a custom config
 */
const report = async (args) => {
  const axios = await connection(args.use);
  const config = await getConfig(args.use);
  // check list and latest, file,
  if (args.list && args.latest) {
    console.error('option --latest is impossible to use with --list');
    process.exit(1);
  }
  if (args.list && args.file) {
    console.error('option --file is impossible to use with --list');
    process.exit(1);
  }
  // check file and latest, status
  if (args.file && args.latest) {
    console.error('option --latest is impossible to use with --file');
    process.exit(1);
  }
  if (args.file && args.status) {
    console.error('option --status is impossible to use with --file');
    process.exit(1);
  }
  if (args.status) {
    if (args.status !== 'error' && args.status !== 'success') {
      console.error('option --status only use <error> or <success>');
      process.exit(1);
    }
  }

  let res1;
  let url = '';
  let query = {};
  if (!args.status && !args.latest) query = null;
  if (args.status) query.status = args.status;
  // if -l --list
  if (args.list) {
    const reports = await getReports(axios, config);
    if (!reports?.length) {
      console.log('no reports available');
      process.exit(0);
    }
    const oneReport = await inquirer.prompt([{
      type: 'list',
      pageSize: 5,
      name: 'files',
      choices: reports,
      message: 'files',
      default: reports.slice(),
      source: (answersSoFar, input) => new Promise((resolve) => {
        const result = reports?.data
          .filter((file) => file.toLowerCase().includes(input.toLowerCase()));
        resolve(result);
      }),
    }]);
    args.file = oneReport.files;
  }

  if (args.file) url += `/${args.file}`;
  if (args.latest) query.latest = args.latest;
  // if -f --file -l --latest
  try {
    res1 = await axios({
      method: 'get',
      url: `/update/report${url}`,
      params: query,
    });
  } catch (err) {
    if (res1?.response?.status === 404) {
      console.error('file does not exist');
      process.exit(1);
    }
    console.error(`service unavailable ${config.url}:${config.port}`);
    process.exit(1);
  }
  console.log(JSON.stringify(res1.data?.report, null, 2));
};

module.exports = {
  report,
};
